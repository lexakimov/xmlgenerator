name: Release

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

permissions:
  contents: write

jobs:
  check-branch:
    runs-on: ubuntu-latest
    outputs:
      on_master: ${{ steps.check.outputs.on_master }}
    steps:
      - name: Check out repository code on master
        uses: actions/checkout@v5
        with:
          ref: 'master'
          fetch-depth: 0

      - name: Check if tag commit is on master branch
        id: check
        run: |
          # Get the commit SHA of the pushed tag
          TAG_COMMIT_SHA=$(git rev-parse ${{ github.ref }})
          echo "Tag commit SHA: $TAG_COMMIT_SHA"

          # Check if this commit is an ancestor of the master branch HEAD (current checkout)
          # Use 'git branch --contains <commit>' is another way, but requires fetching all branches potentially
          if git merge-base --is-ancestor $TAG_COMMIT_SHA HEAD; then
            echo "Tag commit is on master branch."
            echo "on_master=true" >> $GITHUB_OUTPUT
          else
            echo "Tag commit is NOT on master branch."
            echo "on_master=false" >> $GITHUB_OUTPUT
          fi

  check-version:
    runs-on: ubuntu-latest
    outputs:
      versions_match: ${{ steps.check-version.outputs.versions_match }}
    steps:
      - name: Check out repository code for the tag
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.14'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Compare tag version with setup.py version
        id: check-version
        run: |
          # Extract version from tag (strip the leading 'v')
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Tag version: $TAG_VERSION"
          
          # Read version from setup.py
          SETUP_VERSION=$(python setup.py --version)
          echo "Setup.py version: $SETUP_VERSION"
          
          # Compare versions
          if [ "$TAG_VERSION" = "$SETUP_VERSION" ]; then
            echo "✅ Versions match: $TAG_VERSION = $SETUP_VERSION"
            echo "versions_match=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Versions do not match: $TAG_VERSION ≠ $SETUP_VERSION"
            echo "versions_match=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  test:
    needs: [check-branch, check-version]
    if: needs.check-branch.outputs.on_master == 'true' && needs.check-version.outputs.versions_match == 'true'
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
          - '3.14'
    uses: ./.github/workflows/_pytest.yml
    with:
      python-version: ${{ matrix.python-version }}
      ref: ${{ github.ref }}

  build-package:
    needs:
      - check-branch
      - check-version
      - test
    if: needs.check-branch.outputs.on_master == 'true' && needs.check-version.outputs.versions_match == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code for the tag
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.14'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install build setuptools

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/

  build-native:
    needs:
      - check-branch
      - check-version
      - test
    if: needs.check-branch.outputs.on_master == 'true' && needs.check-version.outputs.versions_match == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            python_ver: '3.12'
            platform: windows
            arch: amd64
            artifact_name: xmlgenerator-windows-amd64.exe
            extra_envs: "CCFLAGS=-Oz -g0 -w"
            extra_opts: "--mingw64 --disable-cache=all"
          - os: macos-latest
            python_ver: '3.13'
            platform: macos
            arch: arm64
            artifact_name: xmlgenerator-macos-arm64
            extra_envs: "CCFLAGS=-Oz -g0 -w;CC=clang"
            extra_opts: "--clang --disable-cache=all"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository code for the tag
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python_ver }}
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build native
        id: build_native
        run: |
          python build_native.py --artifact-name ${{ matrix.artifact_name }} --target-platform ${{ matrix.platform }} --target-arch ${{ matrix.arch }} --extra-envs="${{ matrix.extra_envs }}" --extra-opts="${{ matrix.extra_opts }}"

      - name: Upload native artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ matrix.platform }}
          path: ${{ steps.build_native.outputs.artifact_path }}

  build-native-linux:
    needs:
      - check-branch
      - check-version
      - test
    if: needs.check-branch.outputs.on_master == 'true' && needs.check-version.outputs.versions_match == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code for the tag
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}

      - name: Build native
        id: build_native
        run: |
          docker build -t nuitka-builder -f .github/Dockerfile .
          docker run -v $(pwd):/app nuitka-builder --artifact-name xmlgenerator-linux-amd64 --target-platform linux --target-arch amd64 --extra-envs="CCFLAGS=-Oz -g0 -w" --extra-opts="--disable-cache=all"

      - name: Upload native artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-linux
          path: dist_native/xmlgenerator-linux-amd64

  create-release:
    needs:
      - check-branch
      - check-version
      - build-package
      - build-native
      - build-native-linux
    if: needs.check-branch.outputs.on_master == 'true' && needs.check-version.outputs.versions_match == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Python packages
        uses: actions/download-artifact@v5
        with:
          name: python-packages
          path: dist

      - name: Download native binaries
        uses: actions/download-artifact@v5
        with:
          pattern: native-*
          path: dist_native
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ github.ref_name }}
          files: |
            dist/*.whl
            dist/*.tar.gz
            dist_native/*

  publish-package:
    needs:
      - check-branch
      - check-version
      - build-package
    if: needs.check-branch.outputs.on_master == 'true' && needs.check-version.outputs.versions_match == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code for the tag
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.14'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install twine

      - name: Download Python packages
        uses: actions/download-artifact@v5
        with:
          name: python-packages
          path: dist

      - name: Publish package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
